# SRS Configuration for PixelCast Screen Sharing - Ultra High Frame Rate Optimized
listen              1935;
max_connections     1000;
srs_log_tank        file;
srs_log_file        ./objs/srs.log;
daemon              off;

# HTTP API for management
http_api {
    enabled         on;
    listen          1985;
    crossdomain     on;
    # Enable CORS headers for API requests
    raw_api {
        enabled             on;
        allow_reload        on;
        allow_query         on;
        allow_update        on;
    }
}

# HTTP server for serving WebRTC demos and stats
http_server {
    enabled         on;
    listen          8080;
    dir             ./objs/nginx/html;
    crossdomain     on;
}

# WebRTC server for screen sharing - High Frame Rate Optimized
rtc_server {
    enabled         on;
    listen          8000;
    candidate       $CANDIDATE;
    
    # Enable both TCP and UDP for WebRTC compatibility
    tcp {
        enabled         on;
    }
    
    # Use UDP protocol for WebRTC (primary)
    protocol        udp;
    
    # Ultra-low latency optimizations for high frame rates
    # Reduced STUN timeout for faster ICE gathering
    stun_timeout    1500;
    
    # Enable fast ICE gathering
    ice_lite        on;
    
    # Network optimizations
    # Enable DSCP marking for QoS (if supported)
    dscp            46;  # EF (Expedited Forwarding) for real-time traffic
}

vhost __defaultVhost__ {
    # Enable TCP nodelay for lower network latency
    tcp_nodelay     on;
    
    # Enable minimum latency mode
    min_latency     on;
    
    # Ultra-low latency settings for high frame rates
    # Disable merged read for immediate processing
    mr              off;     # Disable for immediate frame processing
    mw_latency      10;      # Ultra-low write latency (10ms)
    
    # Enable CORS for this vhost
    http_remux {
        enabled         on;
        mount           [vhost]/[app]/[stream].flv;
        hstrs           on;
    }
    
    # WebRTC configuration - High Frame Rate Optimized with SSRC Sync Fix
    rtc {
        enabled         on;
        
        # SSRC Synchronization and Error Recovery
        nack            on;      # Negative Acknowledgment for packet recovery
        twcc            on;      # Transport Wide Congestion Control
        pli             on;      # Picture Loss Indication for fast recovery
        
        # FIR (Full Intra Request) for immediate keyframe recovery
        fir             on;      # Enable FIR for SSRC synchronization issues
        
        # SSRC-specific optimizations to prevent "Drop for ssrc not found"
        # Enable SSRC consistency checking and automatic recovery
        api_as_console  on;      # Better logging for SSRC issues
        
        # Conservative PLI timing to prevent SSRC confusion
        pli_for_rtmp    2000;    # Request keyframes every 2 seconds (increased from 1s)
        
        # DTLS optimizations for handshake stability
        dtls_role       passive;
        dtls_version    auto;
        
        # Increased DTLS timeout to prevent connection failures that cause SSRC issues
        dtls_timeout    45000;   # 45 seconds for DTLS handshake (increased)
        
        # CRITICAL: Enable RTX for SSRC consistency and packet recovery
        rtx             on;      # Re-enable RTX to help with SSRC tracking
        
        # Conservative jitter buffer settings to handle SSRC timing issues
        jitter_buffer_min   10;   # Minimum 10ms buffer (increased from 0)
        jitter_buffer_max   100;  # Maximum 100ms buffer (increased from 50ms)
        
        # Increased session timeout for better SSRC persistence
        stun_timeout    8000;     # 8 seconds for better stability (increased)
        session_timeout 120000;  # 2 minutes for session establishment (increased)
        
        # Enable packet ordering to prevent SSRC sequence issues
        packet_order    on;       # Ensure proper packet sequencing
        
        # Disable frame dropping temporarily to debug SSRC issues
        drop_for_pt     off;      # Never drop frames for high FPS
        
        # Enable frame smoothing to help with SSRC timing
        smooth          on;       # Enable smoothing to help SSRC sync (changed from off)
        
        # Enhanced error recovery for SSRC issues
        error_recovery  on;       # Enable automatic error recovery
        
        # Enable packet forwarding with SSRC preservation
        rtmp_to_rtc     on;
        rtc_to_rtmp     on;
    }
    
    # Play settings optimized for SSRC stability
    play {
        # Increased GOP cache for better SSRC recovery
        gop_cache       on;       # Enable GOP cache to help with SSRC sync (changed)
        gop_cache_max_frames 240;  # Cache up to 240 frames for recovery
        
        # Moderate queue for SSRC stability
        queue_length    30;       # Increased for SSRC stability (was 5)
        
        # Moderate latency for SSRC synchronization
        mw_latency      20;       # 20ms for SSRC stability (increased from 10ms)
        
        # Enable realtime mode with SSRC awareness
        realtime        on;
        
        # Increased buffer time for SSRC synchronization
        buffer_time     300;      # 300ms buffer for SSRC sync (increased from 50ms)
        
        # SSRC-aware frame delivery
        drop_for_pt     off;      # Preserve all frames for SSRC consistency
        
        # Moderate delivery interval for SSRC stability
        send_min_interval  20;    # 20ms intervals for SSRC stability (increased)
        
        # Enable SSRC timeout handling
        ssrc_timeout    30000;    # 30 second timeout for SSRC tracking
    }
    
    # Publish settings optimized for SSRC consistency
    publish {
        # Enable merged read for SSRC sequence consistency
        mr              on;       # Enable for SSRC consistency (changed from off)
        
        # Moderate read latency for SSRC stability
        mr_latency      20;       # 20ms for SSRC stability (increased from 10ms)
        
        # Enable realtime publishing with SSRC tracking
        realtime        on;
        
        # Fast publish buffer for high FPS but with SSRC stability
        publish_1stpkt_timeout  5000;  # 5 seconds for connection (increased)
        
        # SSRC-aware packet delivery
        send_min_interval  10;    # 10ms intervals for SSRC stability (increased)
        
        # Reasonable connection establishment with SSRC persistence
        kickoff_for_idle   20000; # 20 seconds idle timeout (increased)
        
        # Enable SSRC consistency checking
        ssrc_check      on;       # Enable SSRC validation
    }
    
    # HLS disabled for performance (not needed for screen sharing)
    hls {
        enabled         off;
    }
    
    # Forward settings - disabled for lowest latency
    forward {
        enabled         off;
    }
    
    # DVR disabled for performance
    dvr {
        enabled         off;
    }
    
    # Transcode optimized for high frame rates
    transcode {
        enabled         on;
        ffmpeg          ./objs/ffmpeg/bin/ffmpeg;
        engine highfps {
            enabled     on;
            vcodec      libx265;
            vbitrate    8000;        # Higher bitrate for high FPS
            vfps        60;          # Support 60 FPS
            vwidth      1920;        # Full HD support
            vheight     1080;
            vthreads    auto;
            vprofile    high;        # High profile for quality
            vpreset     ultrafast;   # Ultrafast preset for high FPS
            vtune       zerolatency; # Zero latency tuning
            vparams {
                keyint          60;  # Keyframes every second at 60fps
                min-keyint      30;  # Allow frequent keyframes
                bframes         0;   # No B-frames for low latency
                refs            1;   # Single reference frame
                rc-lookahead    0;   # No lookahead for immediate encoding
            }
            acodec      libopus;     # Opus for low audio latency
            abitrate    128;         # Good audio quality
            asample_rate 48000;
            achannels   2;
        }
    }
} 